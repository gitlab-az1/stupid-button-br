@use 'sass:math';


@function half-negative($value) {
  @return ($value / 2) - math.random($value);
}


body {
  perspective: 1000px !important;
  -ms-perspective: 1000px !important;
  -moz-perspective: 1000px !important;
  -webkit-perspective: 1000px !important;
  overflow: hidden !important;
  overflow: -moz-hidden-unscrollable !important;
}


.ConfettiContainer {
  position: relative;
  z-index: 800 !important;

  & > .anchor {
    position: relative !important;
    background: transparent !important;
    border: 0 !important;
    outline: none;
    width: 0 !important;
    height: 0 !important;
    pointer-events: none !important;
    z-index: -1 !important;
    transform-style: preserve-3d;
    -webkit-transform-style: preserve-3d;

    &:active span {
      animation: none !important;
    }
  }

  .explosion {
    animation: confetti-settle 8s;
    -moz-animation: confetti-settle 8s;
    -webkit-animation: confetti-settle 8s;
  }

  .explosion > span {
    $min-width: 8px;
    $max-width: 20px;

    $horizontal-max: 95vw;
    $vertical-max: 50vh;
    $depth-max: 500px;
    $max-spin: 10;

    $base-hue: 1; // $set ->> 1 to 360
    $hue-variation: 300; // $set ->> 1 to 360; 1 == no variation | 360 == max variation

    $shape: 0.5; // $set ->> 0 to 1; 0 == circle | 0.5 == mix | 1 == square

    border-radius: var(--shape);
    animation: confetti-spread 10s cubic-bezier(0, 0.75, 1, 1);
    -moz-animation: confetti-spread 10s cubic-bezier(0, 0.75, 1, 1);
    -webkit-animation: confetti-spread 10s cubic-bezier(0, 0.75, 1, 1);
    background-color: hsl(var(--hue) 100% 50%);
    width: max(var(--confetti-size), $min-width);

    @for $i from 1 through 175 {
      &:nth-child(#{$i}) {
        --offset-x: #{half-negative($horizontal-max)};
        --offset-y: #{half-negative($vertical-max)};
        --offset-z: #{half-negative($depth-max)};
        --spin: #{math.random($max-spin)}turn;

        --hue: #{$base-hue + half-negative($hue-variation)};

        --confetti-size: #{math.random($max-width)}px;
        --shape: #{(math.random() - $shape) * 100svw};
      }
    }
  }
}


.confetti.jsxd03e61bc {
  position: absolute;
  inset: 50%;
  z-index: 250;
  background: transparent !important;
  pointer-events: none !important;
  border: 0 !important;
  outline: none !important;
  transform-style: preserve-3d;
  -webkit-transform-style: preserve-3d;
  opacity: 0;

  & > span {
    aspect-ratio: 1;
    position: absolute;
  }
}


@keyframes confetti-spread {
  25% {
    translate: 0 -45vh;
  }
  80% {
    translate: 0 -45vh;
    transform: translateX(var(--offset-x))
      translateY(var(--offset-y))
      translateZ(var(--offset-z))
      rotateX(var(--spin));
    -ms-transform: translateX(var(--offset-x))
      translateY(var(--offset-y))
      translateZ(var(--offset-z))
      rotateX(var(--spin));
    -moz-transform: translateX(var(--offset-x))
      translateY(var(--offset-y))
      translateZ(var(--offset-z))
      rotateX(var(--spin));
    -webkit-transform: translateX(var(--offset-x))
      translateY(var(--offset-y))
      translateZ(var(--offset-z))
      rotateX(var(--spin));
  }
}

@-moz-keyframes confetti-spread {
  25% {
    translate: 0 -45vh;
  }
  80% {
    translate: 0 -45vh;
    transform: translateX(var(--offset-x))
      translateY(var(--offset-y))
      translateZ(var(--offset-z))
      rotateX(var(--spin));
    -ms-transform: translateX(var(--offset-x))
      translateY(var(--offset-y))
      translateZ(var(--offset-z))
      rotateX(var(--spin));
    -moz-transform: translateX(var(--offset-x))
      translateY(var(--offset-y))
      translateZ(var(--offset-z))
      rotateX(var(--spin));
    -webkit-transform: translateX(var(--offset-x))
      translateY(var(--offset-y))
      translateZ(var(--offset-z))
      rotateX(var(--spin));
  }
}

@-webkit-keyframes confetti-spread {
  25% {
    translate: 0 -45vh;
  }
  80% {
    translate: 0 -45vh;
    transform: translateX(var(--offset-x))
      translateY(var(--offset-y))
      translateZ(var(--offset-z))
      rotateX(var(--spin));
    -ms-transform: translateX(var(--offset-x))
      translateY(var(--offset-y))
      translateZ(var(--offset-z))
      rotateX(var(--spin));
    -moz-transform: translateX(var(--offset-x))
      translateY(var(--offset-y))
      translateZ(var(--offset-z))
      rotateX(var(--spin));
    -webkit-transform: translateX(var(--offset-x))
      translateY(var(--offset-y))
      translateZ(var(--offset-z))
      rotateX(var(--spin));
  }
}


@keyframes confetti-settle {
  0%, 80% {
    opacity: 1;
  }
  100% {
    opacity: 0;
    transform: translateY(80vh);
    -ms-transform: translateY(80vh);
    -moz-transform: translateY(80vh);
    -webkit-transform: translateY(80vh);
  }
}

@-moz-keyframes confetti-settle {
  0%, 80% {
    opacity: 1;
  }
  100% {
    opacity: 0;
    transform: translateY(80vh);
    -ms-transform: translateY(80vh);
    -moz-transform: translateY(80vh);
    -webkit-transform: translateY(80vh);
  }
}

@-webkit-keyframes confetti-settle {
  0%, 80% {
    opacity: 1;
  }
  100% {
    opacity: 0;
    transform: translateY(80vh);
    -ms-transform: translateY(80vh);
    -moz-transform: translateY(80vh);
    -webkit-transform: translateY(80vh);
  }
}